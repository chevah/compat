#
# GitHub actions to test chevah-compat.
#
# Available VMs. Don't use `-latest` as we want to pin an OS version.
# https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners
#
# When running a tmate debug session you might need to increase the
# timeout-minutes for each build.

name: Bare

on:
  push:
    branches: [ master ]
    paths:
    - '**.py'
  pull_request:
    branches: [ master ]
    paths:
    - '**.py'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true


env:
  TMATE_DEBUG: 'no'


jobs:

  ubuntu-2004-unicode-path:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    timeout-minutes: 30

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3

    - name: Cache build
      uses: actions/cache@v3
      with:
        path: |
          build-compat
        key: ${{ runner.os }}-${{ hashFiles('pavement.py') }}-${{ hashFiles('brink.conf') }}-unicode

    - name: Deps
      run: ./brink.sh deps

    - uses: chevah/python-info-action@v1
      with:
        python-path: build-compat/bin/python

    - name: Move build to Unicode path
      run: mv build-compat build-compat-ț

    - name: Test
      run: |
        ./brink.sh test_ci2
      env:
        CHEVAH_BUILD: build-compat-ț

    - name: Tmate debug on failure
      if: failure() && env.TMATE_DEBUG == 'yes'
      uses: chevah/action-tmate@v3
      with:
        limit-access-to-actor: true

    - name: Move build back to to ascii
      run: mv build-compat-ț build-compat


  ubuntu-2204-ascii-path:
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2

    - name: Fail on skip-ci
      if: ${{ github.event.after }}
      run: git log -1 --pretty=format:"%s" ${{ toJSON(github.event.after) }} | grep -v 'skip-ci'

    - name: Cache build
      uses: actions/cache@v3
      with:
        path: |
          build-compat
        key: ${{ runner.os }}-${{ hashFiles('pavement.py') }}-${{ hashFiles('brink.conf') }}-ascii

    - name: Deps
      run: ./brink.sh deps

    - name: Test
      run: ./brink.sh test_ci2
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Tmate debug on failure
      if: failure() && env.TMATE_DEBUG == 'yes'
      uses: chevah/action-tmate@v3
      with:
        limit-access-to-actor: true

    - name: Publish cov
      run: ./brink.sh codecov_publish
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}


  macos-unicode-path:
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ macos-11 ]
    runs-on: ${{ matrix.runs-on }}
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v3

    - name: Cache build
      uses: actions/cache@v3
      with:
        path: |
          build-compat
        key: ${{ runner.os }}-${{ hashFiles('pavement.py') }}-${{ hashFiles('brink.conf') }}-unicode

    - name: Deps
      run: ./brink.sh deps

    - name: Move build to Unicode path
      run: mv build-compat build-compat-ț

    - name: Test
      run: ./brink.sh test_ci2
      env:
        CHEVAH_BUILD: build-compat-ț
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Tmate debug on failure
      if: failure() && env.TMATE_DEBUG == 'yes'
      uses: chevah/action-tmate@v3
      with:
        limit-access-to-actor: true

    - name: Move build back to to ascii
      run: mv build-compat-ț build-compat

    - name: Publish cov
      run: ./brink.sh codecov_publish
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}


  macos-ascii-path:
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ macos-12 ]
    runs-on: ${{ matrix.runs-on }}
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v3

    - name: Cache build
      uses: actions/cache@v3
      with:
        path: |
          build-compat
        key: ${{ runner.os }}-${{ hashFiles('pavement.py') }}-${{ hashFiles('brink.conf') }}-ascii

    - name: Deps
      run: ./brink.sh deps

    - name: Test
      run: ./brink.sh test_ci2
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Tmate debug on failure
      if: failure() && env.TMATE_DEBUG == 'yes'
      uses: chevah/action-tmate@v3
      with:
        limit-access-to-actor: true

    - name: Publish cov
      run: ./brink.sh codecov_publish
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}


  windows:
    runs-on: 'windows-2022'
    timeout-minutes: 120

    steps:
    - uses: actions/checkout@v3

    - name: Cache build
      uses: actions/cache@v3
      with:
        path: |
          build-compat
        key: ${{ runner.os }}-${{ hashFiles('pavement.py') }}-${{ hashFiles('brink.conf') }}

    - name: Deps
      run: sh ./brink.sh deps

    - name: Test
      run: sh ./brink.sh test_ci2
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Tmate debug on failure
      if: failure() && env.TMATE_DEBUG == 'yes'
      uses: chevah/action-tmate@v3
      with:
        limit-access-to-actor: true

    - name: Public coverage
      if: ${{ !cancelled() }}
      run: sh ./brink.sh codecov_publish
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}


  # Helper so that on GitHub repo settings we can configure a single job as
  # required.
  bare-required:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: always()
    needs:
      - ubuntu-2004-unicode-path
      - ubuntu-2204-ascii-path
      - macos-unicode-path
      - macos-ascii-path
      - windows
    steps:
      - name: Require all successes
        shell: python3 {0}
        env:
          RESULTS: ${{ toJSON(needs.*.result) }}
        run: |
          import json
          import os
          import sys
          results = json.loads(os.environ["RESULTS"])
          sys.exit(0 if all(result == "success" for result in results) else 1)
